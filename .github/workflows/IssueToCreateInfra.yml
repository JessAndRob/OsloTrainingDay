# when an issue is opened add the title and link to sql database

name: Issue creation to create Infra

on:
  issues:
    types:
      - opened

# default to pwsh
defaults:
  run:
    shell: pwsh

# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs - even though it doesnt directly give the perms here :-()
permissions:
  contents: write  # To push a branch
  pull-requests: write  # To create a PR from that branch

jobs:
  CreateInfraConfigCost:
    name: Create Infra Config Cost
  # only run if issue has the create-infra label
    #if: contains(github.event.issue.labels.*.name, 'spending-your-money')
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
       clean: true
       fetch-depth: 0

    - name: Create folders
      run: |
        $filepaths = @("./demos/IaC/terraform/temp", "./demos/IaC/terraform/plans", "./demos/IaC/terraform/vars", "./demos/IaC/terraform/plans/latest")

        foreach ($filepath in $filepaths) {
          if ( -not (Test-Path $filepath)) {
            Write-Host "$filepath does not exist"
            New-Item -ItemType Directory -Path $filepath
          }
        }
    - name: Get Information to file
      run: |
        Write-Host "What do we have?"
        $Event = @"
        ${{ toJson(github.event) }}
        "@
        Write-Host $Event
        $IssueBody =  @"
        ${{ github.event.issue.body }}
        "@
        # Write-Host $IssueBody
        $IssueBody | Out-File ./demos/IaC/terraform/temp/temp.txt
      shell: pwsh
      continue-on-error: true

    # call api to insert data
    - name: Insert tf vars from temp file
      id: insert_tf_vars
      run: |
          # Get the content of a temp file
          $file = Get-Content ./demos/IaC/terraform/temp/temp.txt -Raw

          # Parse the content using regular expressions
          # Here's a breakdown of how the regular expression works:

          #   (?ms): These are regex flags that enable the "multiline" (m) and "dot matches all" # (s) modes. The multiline mode allows ^ and $ to match the start and end of lines in # addition to the entire string. The dot matches all mode makes the dot (.) character # match newlines as well.
          #
          #   requestor\n\n: This part matches the string "requestor" followed by two newline # characters. It is used to locate the start of the desired information section.
          #
          #   (?<requestor>.*): This is a named capture group that captures any characters (.*) # until the next named pattern in the regex. The captured content is assigned to the # named capture group "requestor".
          #
          #   \n\n### resource_group_name\n\n: This part matches the string "### # resource_group_name" surrounded by two newline characters on each side. It is used # to locate the start of the next piece of information.
          #
          #   (?<resource_group_name>.*): This named capture group captures any characters (.*) # until the next named pattern in the regex. The captured content is assigned to the # named capture group "resource_group_name".
          #
          #   Similar sections exist for the other captured values like sql_instance_name, # location, tags, and so on. Each of these sections follows the same pattern: a named # capture group that captures any characters until the next named pattern.
          #
          #   The overall regex structure is designed to match specific sections of the text and # capture the content within those sections using named capture groups. This allows # you to extract structured data from a given text file.
          #
          $regexResult = [regex]::Matches($file, '(?ms)requestor\n\n(?<requestor>.*)\n\n### resource_group_name\n\n(?<resource_group_name>.*)\n\n### sql_instance_name\n\n(?<sql_instance_name>.*)\n\n### location\n\n(?<location>.*)\n\n### tags\n\n(?<tags>.*)\n\n### administrator_login\n\n(?<administrator_login>.*)\n\n### environment\n\n(?<environment>.*)\n\n### minimum_tls_version\n\n(?<minimum_tls_version>.*)\n\n### public_network_access\n\n(?<public_network_access>.*)\n\n### active_directory_admin_user\n\n(?<active_directory_admin_user>.*)\n\n### active_directory_admin_sid\n\n(?<active_directory_admin_sid>.*)\n\n### tenantid\n\n(?<tenantid>.*)\n\n### sql_database_names\n\n(?<sql_database_names>.*)\n\n### ')

          # Create a JSON object from the extracted values
          $body = @{
              resource_group_name =  $regexResult[0].Groups['resource_group_name'].Value
              sql_instance_name =  $regexResult[0].Groups['sql_instance_name'].Value
              location =  $regexResult[0].Groups['location'].Value
              tags =  $regexResult[0].Groups['tags'].Value
              administrator_login =  $regexResult[0].Groups['administrator_login'].Value
              environment =  $regexResult[0].Groups['environment'].Value
              minimum_tls_version =  $regexResult[0].Groups['minimum_tls_version'].Value
              public_network_access =  if($regexResult[0].Groups['public_network_access'].Value -eq "Enabled") { 1 } else { 0 }
              active_directory_admin_user =  $regexResult[0].Groups['active_directory_admin_user'].Value
              active_directory_admin_sid =  $regexResult[0].Groups['active_directory_admin_sid'].Value
              tenantid =  $regexResult[0].Groups['tenantid'].Value
              sql_database_names =  $regexResult[0].Groups['sql_database_names'].Value
          }

          # Convert the JSON object to a JSON string
          $bodyJson = $body | ConvertTo-Json

          # Display the JSON string
          Write-Host $bodyJson

          # Send the JSON data as a POST request to a specified URL
          $response = Invoke-RestMethod -Uri 'https://dsoslo2023.azurewebsites.net/api/InsertSqlTfVars' -Method Post -Body $bodyJson -ContentType 'application/json'

          # Display the response
          echo $response

          # Create the terraform vars file from a template and replace placeholders
          $requestor = $regexResult[0].Groups['requestor'].Value
          $Date = Get-Date -Format "yyyyMMddHHmmss"

          $varfile = ".\demos\IaC\terraform\deploy_template.txt"
          $Content = Get-Content $varfile

          # Iterate through the hashtable and replace placeholders
          $body.GetEnumerator() | ForEach-Object {
              $replace = $_.Value
              switch ($_.Key) {
                  "public_network_access" {
                      if ($replace -eq 1) {
                          $replace = "true"
                      } else {
                          $replace = "false"
                      }
                  }
              }
              $placeholder = "__" + $_.Key + "__"
              $content = $content -replace [regex]::Escape($placeholder), $replace
          }

          # Generate file paths with requestor name and date
          $historicaldeployfile = "./demos/IaC/terraform/vars/deploy_{0}_{1}.tfvars" -f $requestor, $Date
          $historicalplanfilename = "plans/deploy_{0}_{1}.plan" -f $requestor, $Date
          $historicalplanfilenamefile = "./demos/IaC/terraform/plans/latest/latestplan.txt"
          $deployfile = "./demos/IaC/terraform/deploydev.tfvars"

          # Write the content to the generated files
          Set-Content $historicaldeployfile $content
          Set-Content $deployfile $content
          Set-Content $historicalplanfilenamefile "$historicalplanfilename"

    - name: Add & Commit
      uses: EndBug/add-and-commit@v9
      with:
        author_name: DaBot
        author_email: mrrobsewell@outlook.com
        message: 'Added the updated variables for the infrastructure deployment to the repo for issue number #${{ github.event.issue.number }} raised by  @${{ github.event.issue.user.login }}***NO_CI***'
        new_branch:  'new-infra-issue-${{ github.event.issue.number }}'
        push: origin new-infra-issue-${{ github.event.issue.number }} --set-upstream --force
      continue-on-error: true

    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        destination_branch: "main"
        source_branch: "new-infra-issue-${{ github.event.issue.number }}"
        pr_title: "PR For ${{ github.event.issue.title }} We got some infra to create or delete for issue number #${{ github.event.issue.number }}"
        pr_body: ":crown: *An automated PR*
        for ${{ github.event.issue.title }}
        closes issue number #${{ github.event.issue.number }} raised by @${{ github.event.issue.user.login }}

        " # Full markdown support, requires pr_title to be set
        pr_reviewer: "jpomfret"                         # Comma-separated list (no spaces)
        pr_assignee: "jpomfret"                         # Comma-separated list (no spaces)
        pr_label: "create-infra"                               # Comma-separated list (no spaces)                    # Milestone name

        github_token: ${{ secrets.ROBS_PAT }}