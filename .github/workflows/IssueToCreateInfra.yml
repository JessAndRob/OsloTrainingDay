# when an issue is opened add the title and link to sql database

name: Issue creation to create Infra

on:
  issues:
    types:
      - opened

# default to pwsh
defaults:
  run:
    shell: pwsh

# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs - even though it doesnt directly give the perms here :-()
permissions:
  contents: write  # To push a branch
  pull-requests: write  # To create a PR from that branch

jobs:
  CreateInfraConfigCost:
    name: Create Infra Config Cost
  # only run if issue has the create-infra label
    #if: contains(github.event.issue.labels.*.name, 'spending-your-money')
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
       clean: true
       fetch-depth: 0

    - name: Create temp folder
      run: |
        if ( -not (Test-Path ./demos/IaC/terraform/temp)) {
          Write-Host "temp folder does not exist"
          New-Item -ItemType Directory -Path ./demos/IaC/terraform/temp
        }
        if ( -not (Test-Path ./demos/IaC/terraform/plans)) {
          Write-Host "plans folder does not exist"
          New-Item -ItemType Directory -Path ./demos/IaC/terraform/plans
        }
        if ( -not (Test-Path ./demos/IaC/terraform/vars)) {
          Write-Host "vars folder does not exist"
          New-Item -ItemType Directory -Path ./demos/IaC/terraform/vars
        }
        if ( -not (Test-Path ./demos/IaC/terraform/plans/latest)) {
          Write-Host "latest folder does not exist"
          New-Item -ItemType Directory -Path ./demos/IaC/terraform/plans/latest
        }

    - name: Get Information to file
      run: |
        Write-Host "What do we have?"
        $Event = @"
        ${{ toJson(github.event) }}
        "@
        Write-Host $Event
        $IssueBody =  @"
        ${{ github.event.issue.body }}
        "@
        # Write-Host $IssueBody
        $IssueBody | Out-File ./demos/IaC/terraform/temp/temp.txt
      shell: pwsh
      continue-on-error: true

    # call api to insert data
    - name: Insert tf vars from temp file
      id: insert_tf_vars
      run: |
        # get the temp file contents - I do this so I don't lose anything
        $file = Get-Content ./demos/IaC/terraform/temp/temp.txt -Raw
        # parse the issue
        $regexResult = [regex]::Matches($file, '(?ms)requestor\n\n(?<requestor>.*)\n\n### resource_group_name\n\n(?<resource_group_name>.*)\n\n### sql_instance_name\n\n(?<sql_instance_name>.*)\n\n### location\n\n(?<location>.*)\n\n### tags\n\n(?<tags>.*)\n\n### administrator_login\n\n(?<administrator_login>.*)\n\n### environment\n\n(?<environment>.*)\n\n### minimum_tls_version\n\n(?<minimum_tls_version>.*)\n\n### public_network_access\n\n(?<public_network_access>.*)\n\n### active_directory_admin_user\n\n(?<active_directory_admin_user>.*)\n\n### active_directory_admin_sid\n\n(?<active_directory_admin_sid>.*)\n\n### tenantid\n\n(?<tenantid>.*)\n\n### sql_database_names\n\n(?<sql_database_names>.*)\n\n### ')

        # create the json
        $body = @{
          resource_group_name         =  $regexResult[0].Groups['resource_group_name'].Value
          sql_instance_name           =  $regexResult[0].Groups['sql_instance_name'].Value
          location                    =  $regexResult[0].Groups['location'].Value
          tags                        =  $regexResult[0].Groups['tags'].Value
          administrator_login         =  $regexResult[0].Groups['administrator_login'].Value
          environment                 =  $regexResult[0].Groups['environment'].Value
          minimum_tls_version         =  $regexResult[0].Groups['minimum_tls_version'].Value
          public_network_access       =  if($regexResult[0].Groups['public_network_access'].Value -eq "Enabled") { 1 } else { 0 }
          active_directory_admin_user =  $regexResult[0].Groups['active_directory_admin_user'].Value
          active_directory_admin_sid  =  $regexResult[0].Groups['active_directory_admin_sid'].Value
          tenantid                    =  $regexResult[0].Groups['tenantid'].Value
          sql_database_names          =  $regexResult[0].Groups['sql_database_names'].Value
        }

        $bodyJson = $body | ConvertTo-Json
        Write-Host $bodyJson
        $response = Invoke-RestMethod -Uri 'https://dsoslo2023.azurewebsites.net/api/InsertSqlTfVars' -Method Post -Body $bodyJson -ContentType 'application/json'
        echo $response

        # Create the terraform vars file from the body

        $requestor  =  $regexResult[0].Groups['requestor'].Value
        $Date = Get-Date -Format "yyyyMMddHHmmss"

        $varfile = ".\demos\IaC\terraform\deploy_template.txt"

        $Content = Get-Content $varfile

        # Iterate through the hashtable and replace placeholders
        $body.GetEnumerator() | ForEach-Object {
          $replace = $_.Value
          switch ($_.Key) {
              "public_network_access" {
                  if($replace -eq 1) {
                      $replace = "true"
                  } else {
                      $replace = "false"
                  }
              }
          }
           $placeholder = "__" + $_.Key + "__"
           $content = $content -replace [regex]::Escape($placeholder), $replace
        }

        $historicaldeployfile = "./demos/IaC/terraform/vars/deploy_{0}_{1}.tfvars" -f $requestor, $Date
        $deployfile = "./demos/IaC/terraform/deploydev.tfvars"
        Set-Content $historicaldeployfile $content
        Set-Content $deployfile $content

    - name: Add & Commit
      uses: EndBug/add-and-commit@v9
      with:
        author_name: DaBot
        author_email: mrrobsewell@outlook.com
        message: 'Added the updated variables for the infrastructure deployment to the repo for issue number #${{ github.event.issue.number }} raised by  @${{ github.event.issue.user.login }}***NO_CI***'
        new_branch:  'new-infra-issue-${{ github.event.issue.number }}'
        push: origin new-infra-issue-${{ github.event.issue.number }} --set-upstream --force
      continue-on-error: true

    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        destination_branch: "main"
        source_branch: "new-infra-issue-${{ github.event.issue.number }}"
        pr_title: "We got some infra to create for issue number #${{ github.event.issue.number }}"
        pr_body: ":crown: *An automated PR*

        For issue number #${{ github.event.issue.number }} raised by  @${{ github.event.issue.user.login }}

        "              # Full markdown support, requires pr_title to be set
        pr_reviewer: "jpomfret"                         # Comma-separated list (no spaces)
        pr_assignee: "jpomfret"                         # Comma-separated list (no spaces)
        pr_label: "create-infra"                               # Comma-separated list (no spaces)                    # Milestone name

        github_token: ${{ secrets.ROBS_PAT }}