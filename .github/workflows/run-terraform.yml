# github action to deploy the infrastructure for this training project from the demos\IaC\terraform directory with a manual approval step, a plan artiffact and a infracost report prior to the applu step

name: Check Infrastucture Plan and Cost


on:
  pull_request:
    types:
      - edited
      - reopened
      - synchronize
      - labeled
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs - even though it doesnt directly give the perms here :-()
permissions:
  contents: write  # To push a branch
  pull-requests: write  # To create a PR from that branch

jobs:
  check-plan:
    name: Terraform Plan, cost and review
    # only run if PR has the label 'create-infra'
    if: contains(github.event.pull_request.labels.*.name, 'create-infra')
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ADMINISTRATOR_LOGIN_PASSWORD: ${{ secrets.ADMINISTRATOR_LOGIN_PASSWORD }}
    steps:
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

    - name: Checkout PR branch
      uses: actions/checkout@v3

    - name: Checkout PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh pr checkout ${{ github.event.pull_request.number }}

    - name: Get Information to file
      run: |
        Write-Host "What do we have?"
        $Event = @"
        ${{ toJson(github.event) }}
        "@
        Write-Host $Event
        $IssueBody =  @"
        ${{ github.event.issue.body }}
        "@
        # Write-Host $IssueBody
        $IssueBody | Out-File ./demos/IaC/terraform/temp/temp.txt
      shell: pwsh
      continue-on-error: true

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: demos/IaC/terraform

    - name: Create Terraform Plan Artifact
      id: plan
      run: |
        plans_path="plans"
        mkdir -p plans/latest
        # Get the most recent file using find and printf
        most_recent_var_file=$(find "$plans_path" -type f -printf "%T@ %p\n" | sort -n | tail -n 1 | cut -d ' ' -f 2-)
        # Extract the filename using basename
        most_recent_var_filename=$(basename "$most_recent_var_file")
        # Remove the file extension using parameter expansion
        most_recent_var_filename_without_extension="${most_recent_var_filename%.*}"

        plan_file_name="$plans_path/$most_recent_var_filename_without_extension.plan"

        terraform plan -out="$plan_file_name" -var-file="$most_recent_var_file" -var="administrator_login_password=${{ secrets.ADMINISTRATOR_LOGIN_PASSWORD }}"

        terraform plan -out="plans/latest/$most_recent_var_filename_without_extension.plan" -var-file="$most_recent_var_file" -var="administrator_login_password=${{ secrets.ADMINISTRATOR_LOGIN_PASSWORD }}"
      continue-on-error: true
      working-directory: demos/IaC/terraform

    - name: Generate Infracost Report
      run: |
        # Yeah - I know I should pass them through as parameters but I'm lazy
        plans_path="./demos/IaC/terraform/plans"

        # Directory path
        plans_path="/mnt/c/temp/"
        # Get the most recent file using find and printf
        most_recent_var_file=$(find "$plans_path" -type f -printf "%T@ %p\n" | sort -n | tail -n 1 | cut -d ' ' -f 2-)
        # Extract the filename using basename
        most_recent_var_filename=$(basename "$most_recent_var_file")
        # Remove the file extension using parameter expansion
        most_recent_var_filename_without_extension="${most_recent_var_filename%.*}"

        plan_file_name="$plans_path/$most_recent_var_filename_without_extension.plan"

        curl -sL https://github.com/infracost/infracost/releases/latest/download/infracost-linux-amd64.tar.gz | tar xz -C /tmp
        /tmp/infracost report --path="plan_file_name"
      id: infracost
      if: github.event_name == 'Jeremy' # because I dont want it running today
    - name: Review and Approve
      if: github.event_name == 'pull_request'
      run: echo "Please review the Terraform plan and Infracost report in the PR and approve the deployment if everything looks good."

    - name: Deploy Infrastructure
      if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
      run: terraform apply "plan/terraform.plan"

    - name: Push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          git config --global user.name 'DaBot'
          git config --global user.email 'mrrobsewell@outlook.com'
          git add .
          git commit -m "Added the plan for the infrastructure deployment to the repo for   issue number #${{ github.event.issue.number }} raised by  @${{ github.event.issue.  user.login }}***NO_CI***"
          git push
      continue-on-error: true

